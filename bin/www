#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dong:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var io = require('socket.io');

var privateKey  = fs.readFileSync('./key/1529819111363.key', 'utf8');
var certificate = fs.readFileSync('./key/1529819111363.crt','utf8');
var credentials = {key:privateKey,cert:certificate};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);
var SSLPORT = 443;
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var ioServer = io(server);
var httpsServer = https.createServer(credentials,app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
httpsServer.listen(SSLPORT);


var nsp = ioServer.of('/my_namespace');
var push_data = [];
var client_id = [];
nsp.on('connection', function(socket){
  client_id.push(socket.id);
  console.log(client_id);
  socket.on('sendPosition',function(data){

    var index_num = client_id.indexOf(data.id);
    console.log(index_num);
    if(index_num >= 0){
      push_data[index_num] = data;
    }else{
      push_data.push(data);
    }
    console.log(push_data);
  })
  socket.on('disconnect',function(){
    console.log('close');
    var number = client_id.indexOf(socket.id);
    client_id.splice(number,1);
    push_data.splice(number,1);
  })
});

setInterval(function(){
  if(push_data.length > 0 && push_data[0].id != null){
    nsp.emit('getPosition',push_data);
  }
},14);

ioServer.on('connection',function(socket){
  console.log('someone connected');
  socket.on('sendData',function(data){
    console.log(data);
    ioServer.emit('getMsg',data);
  });
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
